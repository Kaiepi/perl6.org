WORKING GROUP: perl6-internals
CHAIR: Dan Sugalski <dan@sidhe.org>
DEADLINE: 13 October 2000 (extended for parrot development)
MISSION: To develop RFCs on the internals API and architecture of perl6.
DESCRIPTION: This list is for discussion of internals design, architecture changes, embedding, extending, and so on.

WORKING GROUP: perl6-language
CHAIR: Kirrily Robert <skud@netizen.com.au>
DEADLINE: 13 October 2000 (extended for continued discussion)
MISSION: To develop RFCs on the language design of perl6.
DESCRIPTION: This list is for discussing user-visible changes to the language.

WORKING GROUP: perl-qa
CHAIR: Michael Schwern <schwern@pobox.com>
DEADLINE: 13 October 2000
MISSION: To develop RFCs on QA processes in perl6 development.
DESCRIPTION: This list is for the topics relating to quality assurance, including test suites, validation processes, and bug
tracking. 

WORKING GROUP: perl6-stdlib
CHAIR: Graham Barr <gbarr@pobox.com>
DEADLINE: 13 October 2000
MISSION: To develop RFCs on the standard perl6 library.
DESCRIPTION: This list is for this list will cover module APIs (e.g., fixing the screwup with IPC::Open2 and IPC::Open3's
argument order), proposed new standard modules (e.g., web and FTP), installation (e.g., suggest a perl6 CPAN design that
makes the equivalent of CPAN.pm easy to write), and so on. 


[closed]

WORKING GROUP: perl6-meta 
CHAIR: Nathan Torkington <gnat@frii.com>
DEADLINE: ?
MISSION: Discussion and development of the process of developing
perl6. (this is to the ongoing process what bootstrap@perl.org was to
the initial work).

WORKING GROUP: perl6-build
CHAIR: Jarkko Hietaniemi <jhi@iki.fi>
DEADLINE: 13 October 2000
MISSION: To develop RFCs on the configuration and installation of perl6.


CHAIR: Dan Sugalski
WORKING GROUP: perl6-internals-api-extensions
DEADLINE: Nov 24, 2000
MISSION: Develop the API for perl 6 extensions
DESCRIPTION: This group is charged with developing the API perl presents to 
extensions. This group should develop an RFC for this, as well as a header 
file, stub source, and as a few rough test programs.

CHAIR: Dan Sugalski
WORKING GROUP: perl6-internals-api-embed
DEADLINE: Nov 24, 2000
MISSION: Develop the API for perl 6 embedders
DESCRIPTION: This group is charged with developing the API perl presents to 
embedding programs. This group should develop an RFC for this, as well as a 
header file, stub source, and as a few rough test programs.

CHAIR: Dan Sugalski
WORKING GROUP: perl6-internals-api-parser
DEADLINE: Nov 24, 2000
MISSION: Develop the API for the perl 6 parser
DESCRIPTION: This group is charged with developing the API for the perl 6 
parser/lexer/tokeniser. This group should develop an RFC for this, as well 
as a header file, stub source, and as a few rough test programs. The parser 
will be written in perl.

WORKING GROUP: perl6-internals-bignum
MISSION: Working group for the BIGNUM package.

CHAIR: Dan Sugalski
WORKING GROUP: perl6-internals-syntax-tree
DEADLINE: Nov 24, 2000
MISSION: Develop the syntax tree structure for perl 6
DESCRIPTION: This group is charged with developing the structure of the 
syntax tree (or HIR, if you'd prefer that term) that the perl 6 parser 
hands off to the bytecode compiler, optimizer, and execution engine.

WORKING GROUP: perl6-internals-unicode
CHAIR: Simon Cozens <simon@cozens.net>
DEADLINE: Oct 28, 2000
MISSION: Develop a consistent vision of how perl should
handle unicode (and all character data) internally.
DESCRIPTION: This group's mission is to get perl 6 a solid
foundation to handle unicode data. This includes how perl
handles character and binary data internally, as well as
how it presents that data to external code. (Including
binary extensions and embedding apps)


LIST:           perl6-language-data
CHAIR:          Jeremy Howard <jeremy@howard.fm>
MISSION:        Discuss and draft RFCS for Perl 6 language features
                related to the Perl Data Language (PDL) and numeric
                Perl in general.  Report weekly to the Language WG.
DEADLINE:       September 30th

WORKING GROUP: perl6-language-flow
CHAIR:         uri guttman <uri@sysarch.com>
MISSION:       Draft, discuss, and revise RFCs relating to flow control
               in Perl 6, eg switch/case, looping, etc.  Suggest/request
               other flowcontrol-related lists if appropriate
DEADLINE:      3 weeks, extensible on request (end 26th August?)
DESCRIPTION:   Submit flowcontrol-related RFCs to the Perl 6 librarian
               as they are developed.

WORKING GROUP:  perl6-language-io
CHAIR:          Nathan Wiger <nate@wiger.org>
MISSION:        Draft and discuss I/O related RFCs, including (but not
                limited to) RFCs 14 and 30.
DEADLINE:       3 weeks, extensible on request (end August 26)
DESCRIPTION:    Submit I/O related RFCs to the Perl 6 librarian as they
                are developed.

LIST:           perl6-language-regex
CHAIR:          Hugo van der Sanden  <hv@crypt0.demon.co.uk>
MISSION:        Draft and discuss RFCs related to regexp language
                issues in Perl 6.  Report weekly to Language WG.
DEADLINE:       September 30th (semi-permanent sublist)

WORKING GROUP: perl6-language-subs
CHAIR:         Tim Jenness <timj@jach.hawaii.edu>
               Damian Conway <damian@cs.monash.edu.au> (if he wants it)
MISSION:       Draft, discuss, and revise RFCs relating to subroutines
               in Perl 6, eg named parameters, want(), prototyping
DEADLINE:      3 weeks, extensible on request (end 25th August?)
DESCRIPTION:   Submit subroutine-related RFCs to the Perl 6 librarian
               as they are developed. 

WORKING GROUP: perl6-language-mlc
CHAIR:         Michael J. Mathews <mmathews@oxygen.com>
MISSION:       Discuss and redraft the multiline comments RFC
DEADLINE:      10 August 2000
DESCRIPTION:   Michael to post the redrafted RFC back to perl6-language

WORKING GROUP:  perl6-language-strict
CHAIR:          J. David Blackstone <jdavidb@dfw.net>
                Daniel Chetlin <daniel@chetlin.com>
MISSION:        Discuss the use of the strict pragma in Perl 6
DEADLINE:       18 August 2000
DESCRIPTION:    Redrafted versions of Perl RFCs 6 and 16, sent to the
                librarian and hence to the perl6-language list

LIST:           perl6-language-datetime
CHAIR:          Russ Allbery <rra@stanford.edu>
MISSION:        To develop RFCs related to date and time handling in
                Perl 6, including RFCs 48, 7, etc; to identify areas
                which need to be addressed by the stdlib working group.
DEADLINE:       2 weeks (August 29th)

LIST:           perl6-language-errors
CHAIR:          Steve Simmons <scs@ans.net>
MISSION:        To develop RFCs related to error handling and exceptions
                in Perl 6, possibly combining existing RFCs into a more
                cohesive whole.
DEADLINE:       2 weeks (August 29th)

LIST:           perl6-language-objects
CHAIR:          Nathan Wiger <nate@west.sun.com>
MISSION:        Develop RFCs related to objects and OO programming in
                Perl, possibly rationalising existing RFCs where they
                cover the same ground.
DEADLINE:       As long as it takes.  Report fortnightly (first report
                August 29th).

WORKING GROUP: perl6-licenses
CHAIR:         Bradley Kuhn <bkuhn@ebb.org>
DEADLINE:      13 October 2000
MISSION:       To develop RFCs on licensing.
DESCRIPTION:   Larry has suggested some changes to the Artistic
               license, which need to be codified.  The perl6
               copyright holder policy needs to be defined.


List: perl6-source-control
Chair: Dan Sugalski <dan@sidhe.org>
Deadline: 18 September 2000
Mission: To decide the source control system (Perforce, CVS, etc) to be used for perl6 development.


WORKING GROUP:  perl6-language-unlink
CHAIR:          Nathan Wiger <nate@wiger.org>
MISSION:        Discuss and redraft RFC 29. Draft and discuss an
                opposing RFC *or* rename RFC 29 to "ways of dealing with
                unlink()" and discuss various viewpoints.
DEADLINE:       1 week (end August 12th)
DESCRIPTION:    Submit redrafted RFC 29 to perl6-language.  Optionally 
                submit opposing RFC.

