=head1 Perl 6 Summary for 2005-03-07 through 2005-03-22

All~

Welcome to yet another fortnights summary.  I believe this is the highest volume I have ever seen the three lists at simultaneously.  Hopefully they will keep it up, because good work is being done.  To aid in the epic endeavour of summarizing all this, I have had to add some new Jazz to my playlist.  We will see how it works out.  If it doesn't work well, blame Seton.

=head2 Perl 6 Language

=head3 the actual name of &?SUB

David Storrs wanted to know how he could get the name of &?SUB.  Larry told him that $?SUBNAME would be the most reliable way to get the short name.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/038d53bce6baca3a/2bc5895525215f2f#2bc5895525215f2f>



=head3 Unlimited Argument Patterns

Luke Palmer has tasted the forbidden fruit of Haskell and now he wants more of it in Perl 6.  In particular he wants even more powerful pattern matching of arguments for MMD.  Rod Adams speculated that Larry had decided Perl 6 would not be ML...  In the end no real consensus, but don't hold your breath seems to be the feeling.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2feef37c11edaa9e/4dd34d9d0ae95e5e#4dd34d9d0ae95e5e>



=head3 Limited Argument Patterns

Wolverian was a little unsure of what exactly C< sub foo(0) {...} > meant.  Larry explained that it was just sugar for C< sub foo ( $bar of Int where { $_ == 0 } $bar )    { ... }  >.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bb118c7350c76657/6338e5bb22c89ba6#6338e5bb22c89ba6>



=head3 List Constructors

Wolverian made a list of list constructors, asking what each did.  Larry explained: For the most part, the same thing as perl 5, a few would produce a warning.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/322bd2ced30a06d0/c39068c3b61f780e#c39068c3b61f780e>



=head3 Decorating Primitives

The question arose of how decorating objects with roles interacted with low level types.  Larry came to the conclusion that it was OK, unless you wanted to decorate a single element in a primitive array.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/086a99985beac390/80ca81ed0f831948#80ca81ed0f831948>



=head3 splat operator in assignment

Juerd was unsure how splats and list assignment interacted.  The answer is that list assignment is exactly the same as Perl 5 to allow for extending return list.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/31d8c3054628253c/e9f77f4a2edd9551#e9f77f4a2edd9551>



=head3 Logic Programming

Rod Adams pointed out that much of logic programming could be implemented using the rules engine.  Unfortunately, the syntax gets a little hairy and cumbersome.  Larry said that this particular goal might be something that is not addressed immediately in 6.0, but possibly differed instead.  Ovid rumbled about porting a Warren Abstract Machine to Parrot... I would like it.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/63f9c15e5ef27c17/ccf0a7f26d229344#ccf0a7f26d229344>



=head3 Locale-KeyedText

Darren Duncan finished up the first non-core Perl 6 module.  Being properly hubristic, he asked for a critique.  His questions touched on subjects including subtypes, module loading, and strictness...

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5e1c7888b8b771c3/3f03a9a2ace1a375#3f03a9a2ace1a375> -- critique request


L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0757424a38d65e97/a4a53ed54d48d7f4#a4a53ed54d48d7f4> -- misc questions



=head3 bar $f =?= $f.bar

Rod Adams wondered what would happen if he had both a sub and a method name bar.  What would C< $f.bar > and C< bar $f > do?  Jonathan Scott Duff explained that C< $f.bar > would call the method while C< bar $f > would call the sub.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d718bf73790d072e/736a522e91cb0870#736a522e91cb0870>



=head3 MMD object

Rod Adams wants a single object to represent all of the possible multi methods associated with a particular short name.  It seems that Rod dranks some of the lisp cool-aid (although in this case, I agree).  He explained how this allowed the dispatch scheme to be changed on a multi by multi basis and also allowed for nice introspection.  This led to a discussion of how this would work with lexically installed multi methods, and if this would trip people up.  No real consensus seemed to appear...

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/42a32bb7c727de7e/5891f6a40d031af2#5891f6a40d031af2>



=head3 :foo<o> != :foo('o'); :foo<o> == :foo{'o'}

Juerd wondered what the implications of <a> mapping to ('a') were.  Larry replied that it did not map in that manner.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/77d165f146b6da7f/99893d787d04f496#99893d787d04f496>



=head3 lazy loading of object

Yuval Kogman wondered how he could get his objects to load lazily.  Larry told him that delegation would probably be the best bet.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8d37df23ea9b1429/459494c94afe7681#459494c94afe7681>



=head3 throwing from higher up the call stack

Thomas Yandell wants a way to throw from further down the call stack.  Sadly he was warnocked.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1466172da2ed2c32/33e471f95f198b67#33e471f95f198b67>



=head3 sprintf

Juerd wants an sprintf like function C< f/FORMAT/EXPR/ >.  Larry seems to think that C< EXPR.as(FORMAT) will suffice, especially if as is a list op.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b02884b476fe87c7/8c7be753bf0ee372#8c7be753bf0ee372>



=head3 S29, builtin function

Rod Adams has been hard at work creating a list of build in functions.  He has a version up at L< http://www.rodadams.net/Perl/S29.html >.  This led to good discussions about what things had alternate forms and what did not.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1bf5b21a8dbb991a/02c5bfc9ab3bae9e#02c5bfc9ab3bae9e> -- discussion



L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/17969d56c1fb86e0/3274abd0d8b8ed5c#3274abd0d8b8ed5c> -- more discussion



=head3 python to eliminate reduce()

Aristotle Pagaltzis posted a link explaining why reduce will be eliminated in Python 3000.  This led to a brief discussion of various design philosophies.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d03b4d33ca8b5260/a6526b909001d7b8#a6526b909001d7b8>



=head3 SEND + MORE = JUNCTIONS

Sam Vilain fixed up the SEND + MORE example to work correctly with junctions.  Unfortunately, the hoop through which he had to jump are pretty horrendous.  Larry mumbled that the option of autothreading all conditionals might work, but would send to many lynch mobs after him.  I for one like both Twin Peaks and that idea...

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8127c2b44893bed4/387d5076256105db#387d5076256105db>



=head3 for with a function reference

Rod Adams wanted to know how for would behave with various types of functions or codeblocks.  Luke Palmer provided answers.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f89531093cc2e3da/cd015186c0b67a77#cd015186c0b67a77>



=head3 adding interfaces to arguments

Thomas Sandlaﬂ wondered when arguments to function would be decorated with roles from the function signature if they didn't exist.  Larry conjectured about allowing different views on objects versus mixing in various roles.  This led people to talk about covariant typing.  An array of ints will always return you a number and an array of numbers will always accept an int.  But an array of ints will not necessarily accept a number and an array of numbers will not necessarily return an int.  Thus changing your view can be valid when writing and not when reading or vice versa.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d7d6bd1506544ee5/9433d70b82708e82#9433d70b82708e82>



=head3 pugs too lazy

Miroslav Silovic noticed that closing a file handle in pugs did not force all the thunks associated with the file.  While this was a bug in pugs, it led to conversation about whether = should be lazy or eager.  Larry thinks that it will be safer to start eager and become lazy then vice versa.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1686157fa36e84c5/f59347f0f2fb4b3f#f59347f0f2fb4b3f>



=head3 Exists and Delete as functions

Rod Adams wondered how he would define the signatur of Exists and Delete as they do not evaluate the subscripted variables in their arguments.  Larry explained that they are now methods on the hash and you would have to do a little macro magic to get it to work the old way.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/52274a6d4736795a/7886d251717dcbcf#7886d251717dcbcf>



=head3 remove(reset())

Steve Peters pointed out that reset() was not almost useless and has been "vaguely deprecated" for a while.  Larry declared it dead.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b83fa0819060ca02/e86555009e886e36#e86555009e886e36>



=head3 lists in string context

Juerd put out a plea for list in string context not to automatically provide spaces between elements.  Larry pointed out various ways to join on the empty string, which I think is his way of saying too bad...

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d14425dbcd70da26/49ce257ba619e231#49ce257ba619e231>



=head3 popping a multidimensional array

Rod Adams wondered what it meant to pop a multidimensional array.  Larry aggreed that it should pop off entire dimensions.  Does this mean that popping such an array in a loop will pop dimensions until there is only one left, at which point it will switch to popping elements?

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/00ea49729b4fb348/7352b8e80a4bec26#7352b8e80a4bec26>



=head3 index out of bounds

Markus Laire wondered what C< index("Hello", "", 999) > would return.  Larry explained that it is not as simple as he thinks cause strings use magic indices that do unicode stuff, but it would probably throw an exception.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5df636005a324a20/edfd61c7066429f0#edfd61c7066429f0>



=head3 GUI paradigm

Michele Dondi wants Perl 6 to support a GUI paradigm better then most languages currently do.  He is not quite sure how, but he is sure that it would be cool.  I agree that it would be cool.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a9ed04e00bade7c0/52337570505cb3f5#52337570505cb3f5>



=head3 hiding from ones callee

Autrijus wants to call a function but make it appear as if his caller did it.  Larry suggested that wrap/call would be appropriate.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/cba8748ebd6084c6/05cbce0b1ca98174#05cbce0b1ca98174>



=head3 quotemeta

Rod Adams voted for axing quotemeta.  People seemed to agree that it should go, but what should be left in its place?  Larry suggested an argument to C<as>.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ae745954ee8361c6/fd6dc65151a03ae9#fd6dc65151a03ae9>



=head3 zip function signature

Rod Adams was having difficulty determining the function signature for &zip.  This led to a discussion of when C< is rw> was implied, but not an answer to his question.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/be17e769ee1b3ae9/4da615a5a91eaf2b#4da615a5a91eaf2b>



=head3 Symbol table interactions

Gall Yahas wondered how ::() would react to undefined variables.  Larry explained that it might be either lega or illegal as an lvalue depending on whether or not the scope had finished being compiled and that it would be undefined as an rvalue.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/60dce44260f2a93d/8713b16d403879e5#8713b16d403879e5>



=head3 propogating called context

Yuval Kogman wants to call a sub with the same context he was called in so that he can munge the result(s).  Warnock applies.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/601792cc6008e3b1/f3c5cdf9ab6c7a5c#f3c5cdf9ab6c7a5c>



=head3 true(0)

Juerd suggested that "true" ought to be renamed as it was really counterintuitive.  Much discussion ensued about alternatives.  Larry hemmed for a bit, but decided to stick with  true in the end

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/027584c278aa0ecc/d658af04afb41def#d658af04afb41def>



=head3 Junction Questoins

Stevan Little wondered if the junctions in pugs were behaving correctly.  Luke Palmer assured him that they were for the examples he posted.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c31ccf483dbe1948/0b6c7014b4be8ff4#0b6c7014b4be8ff4>



=head3 POD vs kwid : round 1.  FIGHT!

Aaron Sherman posted a rought draft of a better POD.  This led to many people passionately discussing the merits and demerits of POD and kwid.  Fortunately as the summarizer endowed with the power of double speaking, I can definitively say that the conclusion was that everybody prefers both kwid over pod and vim over emacs.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/171cd34b1e84bf8c/5531a708a6b8a333#5531a708a6b8a333>



=head3 importing constants from another module

Song10 wanted to know how to import constants from anothermodule into his without having to specify scope everywhere.  Warnock applied.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e689486905f15375/b876a174c00da4b8#b876a174c00da4b8>



=head3 returning references vs copies

Darren Duncan wants to protect his classes from their malicious enemies who would use his references against him.  Thus he wants to know if his accessor methods return references or copies.  Larry explained that they would probably return lazy copies, to provide the requist protection, except when used inside that class.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/eaf15ca9e032cfa1/53d856b79ec5aabd#53d856b79ec5aabd>



=head3 precedence of where

Chip Salzenberg wondered if C<where> or C< | > had higher precedence.  Larry replied that where was part of a magic group of declarational keywords that did some weird stuff.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/376a1703e186fdc7/e30509cf16667057#e30509cf16667057>



=head3 strings and pain

Rod Adams wants to change strings to deal with unicode differently.  Larry thinks his idea forces the programmer into the machines mindset too much.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a95fa7c746d4701a/caef6fe695f484cd#caef6fe695f484cd>



=head3 caller's slurpy array

Rod Adams wants access to his caller's slurpy array and suggests that it be @_.  Larry agreed.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7318f41d1354a449/6cae07180e484d20#6cae07180e484d20>



=head3 lvalue slices

Matt Diephouse wants to assign to an array slice but doesn't know if he can.  He can.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2095c65253615777/250915713d504ccf#250915713d504ccf>



=head3 .method; $self.method; $_.method

As originally specified C< .method > means C< $_.method >.  This sets is appart from C< $.foo, @.foo, %.foo > which all refer to C< $self >.  Much discussion ensued.  I think the pendulum is slowly swinging toward switch the meanting of C< .method > to refer to C< $self.method >.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/cf458503a5ec514f/9083077118873dd3#9083077118873dd3>



=head3 Duff's Device

Gaal Yahas lamented his lack of ability to use Duff's Device in Perl 6.  Larry made noises that it might not be impossible, but would still not be a good idea.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a42b280a81d56ae2/90c1b8d03c869e59#90c1b8d03c869e59>



=head3 the fate of study

Rod Adams wondered what would happen to study.  Since I never did it in high school or college, I doubt I will begin now.  Other seems to think it would be easier to leave it as a no op in case we want to do it eventually.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6534a326e4840512/bed755ec9ba75c14#bed755ec9ba75c14>



=head3 some ado about nothing 

Rod Adams wants a no-op function and suggested nothing.  There was some discussion about whether 1 should work.  I am surprised that no one suggested study....

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a1a5bdbf912fd91a/8d1aef1de9edad01#8d1aef1de9edad01>



=head3 chr and ord

Rod Adams thought that perhaps chr and ord should be restricted to operating at the code point level.  Larry was less sure.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ea49812733e46265/776d142ee2edcb2f#776d142ee2edcb2f>



=head2 Perl 6 Compilers

Last week I tried to link many of the patches to pugs.  I now think that was a mistake for two reasons.  (1)  there are a great many and (2) many more occur off list and are thus missed. Therefore, I will not go provide links for specific patches unless they pass my arbitrary test of as important as my pizza.

=head3 Pugs 6.0.12

Autrijus release pugs 6.0.11 and 6.0.12.  The features are plentiful and awesome.  For a more complete list (which is long) as well as daily blow-by-blow of the PUGS development (which is fast) check out Autrijus's journal L< http://use.perl.org/~autrijus/journal/ >.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/252e51259e2e8668/296f1effec2f7ece#296f1effec2f7ece> - 6.0.11


L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/dfb62cfd8d7c9ae8/7701be9639425bc3#7701be9639425bc3> -- 6.0.12



=head3 helping PUGS

Matthew Campbell wondered how best to help pugs.  Autrijus Tang gave him a helpful knudge.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2f991178dc3f0310/39f0bee1765b05ba#39f0bee1765b05ba>



=head3 p6ify Algorithm::Dependency

Adam Kennedy asked for a volunteer to translate Algorithm::Dependency to perl 6.  Darren Duncan did it and fast too.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/83250035939400f5/b51d37ddbcbc4b48#b51d37ddbcbc4b48>



=head3 help PUGS

Anthony Kilna knew that one of the best ways to help PUGS was to write tests but didn't know if there was a database of tests that needed to be written or were written.   	
Stevan Little pointed him to the in progress attempt to build just such a database and said that would be a good place to help.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8192eea1c2584767/db780fa372437a16#db780fa372437a16>



=head3 sand traps abound when golfing in p6

Andrew Savige (aka mad golfer) has been working at porting a "small" program to perl 6.  He wrote up his experiences at L< http://www.perlmonks.org/?node_id=440685 >.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f4005c8df3c892bf/a6efb74699ea57fa#a6efb74699ea57fa>



=head3 numification of strings

There was some discussion of how to numify a string.  Some wanted smart parsing, others wanted simple parsing.  For a while simple was winning.  I am not sure if it one in the end though...

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f4f2cedbc5b97061/eb81ac0b17fd1bd8#eb81ac0b17fd1bd8>



=head3 SQL::Routine

Darren Duncan announced his intent to port SQL::Routine to Perl 6 shortly.  You might be able to hold your breath.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/6974d4cff16fb2bf/f7786d53603fc773#f7786d53603fc773>



=head3 Pug's Bugs vs Blue's Clues

Stevan Little compiled a list of bugs for pugs.  By the time you read this, many will probably have been fixed.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/d579becc29dec05f/a47f1de3c76b11af#a47f1de3c76b11af>



=head2 Parrot

I will start this part with a very large anouncement.  Dan has decided to step down as Parrot's Chief Architect.  Chip Salzenberg (who just earned first name only status) has taken up the burning parrot, err torch.  To forestall questions/outrage/grumbling, Dan explained that Leo did not get the position because he did not want it.  I know that I personally have learned a lot from Dan and Squaks of the Parrot (including how to turn crystal sugar into bakers sugar), and want to think him a great deal for the work he put into Parrot.  This means the responsibility of returning the pie to Guido now falls on Chip's shoulders.


=head3 make install parrot headers

Lambeck noticed that make install does not install parrot's header files.  It probably should; so he filed a bug.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e0d274fbb5120b33/14e48637be806485#14e48637be806485>



=head3 atan2 needs -xlibmieee on Sun

Andy Dougherty provided a patch adding appropriate hints to the solaris build.  Leo applied it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f41e809121ef5335/2f7420ec96a32121#2f7420ec96a32121>



=head3 Burning Parrot

Leo put out a request to have the parrot tinderboxen revived.  Steve Peters suggested that it could be integrated with the current perl smoke reporting process.  Peter Sinnot put up a server on a spare machine in the mean time.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4b2cc5857c50a76c/48b36b3efb9fe952#48b36b3efb9fe952>



=head3 ncurses_life

Uwe Voelker reported a bug in ncurses_life.  Leo fixed it and put out a plea for someone to update it.  Matt Diephouse updated it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f3e4cb739062468c/0c3d76d031ac94de#0c3d76d031ac94de>



=head3 refactor of t/pmc/pmc.t needed

Leo suggested that an interested party would be able to factor the Perl* tests out of pmc.t and into perl.t.  Steven Schubiger offered to try.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/329dc516447d2104/eeb2c77b3ca37aeb#eeb2c77b3ca37aeb>



L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/458c7e0121e480a3/b73023e931faf731#b73023e931faf731>



=head3 string tasks

Leo posted a set of tasks looking for takers with respect to string stuff.  Steven Schubiger stepped up to some and Aldo Calpini another.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/68715e4f35b78064/07b7ae78e013dbcf#07b7ae78e013dbcf> -- initial request


L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d7d08d47e33c546/9465b678d81a6bfd#9465b678d81a6bfd> -- Aldo's Offer



=head3 thr-primes.imc

Bernhard Schmalhofer updated thr-primes.imc to not use Perl* pmcs, which uncovered a bug in Undef.pmc.  Leo fixed it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/42b4c69ce7b376e5/2b8d1ab0976fa155#2b8d1ab0976fa155>



=head3 aggregate clone vtable

Leo noticed that some aggregates do deep copies while others do shallow.  All should do shallow.  Takers welcome.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8870881652047d2e/111693f3a2d7c6fa#111693f3a2d7c6fa>



=head3 **Arrays TODO

Fixed*Arrays should have a limited form of splice available to them.  Also, the Resizable*Arrays should have their allocation schemes adapted to that of the ResizeablePMCArray and *BooleanArray should store just bits.  Bernhard Schmalhofer offered to take on the *BooleanArrays.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/48ad2aae2d583d4a/5b5311c4fc191ef0#5b5311c4fc191ef0> -- the request


L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d0540dca561770d2/fb27be1eb9fa8112#fb27be1eb9fa8112> -- the offer



=head3 anonymous subclasses

Simon Glober discovered that anonymous subclasses were not working in December.  Now Leo fixed it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fe09eef1be4f75fd/f05daf33ba86a454#f05daf33ba86a454>



=head3 Perl 6 compiler in Perl 6

Millsa Erlas hoped that writing a Perl 6 compiler in Perl 6 was still a priority.  Markus Laire pointerd her to pugs.  She seemed happy.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9145d543f52f35bd/e2b62a27a803370a#e2b62a27a803370a>



=head3 object internals

Leo has been steadily hacking away at the object internals.  There is now a get_mro opcode.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e778497a56444f84/db497f0efde11445#db497f0efde11445>



=head3 dynclasses failure in gcc 3.3.3

Leo commited a work around to a gc problem with dynamic library loading.  Eventually the real solution will need to be implemented.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4af0306d5b4bdb5d/f9079cdebbfb3651#f9079cdebbfb3651>



=head3 The many faces of Win32

It turns out that one can have several different flavors of windows builds with MinGW (not to mention cygwin or msvc).  This causes pain.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aeaf62dbeb16f14a/9d77af5c1c99a840#9d77af5c1c99a840> -- mingw


L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/82b2988e0777be6b/45b485d60499377c#45b485d60499377c> -- pain


L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ea4934debf27ef24/2af4665d9f0509a6#2af4665d9f0509a6> -- the many moods of MinGW


 
=head3 TODO: clean parrot's A*I

Jarkko Hietaniemi posted a TODO for cleaning up both Parrot's API and ABI.  Leo agreed that it would be very nice.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/075f871cfeba125e/f7f0ae2f3d71f5c3#f7f0ae2f3d71f5c3>



=head3 calling PIR from a PMC

William Coleda wanted to know how to call PIR code from a PMC.  Jeff Horwitz pointed him to the Parrot_call_sub_* API.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/52275131d2b6ba0b/5d04a0e33841544d#5d04a0e33841544d>


 
=head3 PAST compiler problems

Bernhard Schmalhofer has a program that he can make work in imc, but not from PAST.  It turns out that we don't yet have  a way to pass options to the compile opcode.  We need that.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0377ffb9409a4db6/d87dcd5b13f79c33#d87dcd5b13f79c33>



=head3 makefile cleanup

Bernhard Schmalhofer offered to clean some old imcc targets out of the makefile.  Leo told him to go for it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c0dbe1c83c032522/82d308ca303342fb#82d308ca303342fb>



=head3 MRO broke TCL

Will Coleda was sad that Leo kept breaking TCL.  Leo suggested that he add the tcl tests to the base make test.  Also, there is some funniness going on since test fail for Leo and not Will.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ffc411a054b614d6/347b5254037f240d#347b5254037f240d>



=head3 TODO add multiple return values to Parrot_call_sub 

Matt Diephouse posted a todo for adding the ability to access multiple return values from C.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8e24f6db5638451b/3aedf5963bbf574a#3aedf5963bbf574a>



=head3 MANIFEST failures

Bob Rogers was getting MANIFEST failures.  It turns out that he forgot to use the "-dP" switch with CVS.  We have all done it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/40f344f759cb5df4/b11b606daea1abb6#b11b606daea1abb6>



=head3 pasm -> imc

Bernhard Schmalhofer commited a few TODO tests for generating and running PASM from pir.  Jens Rieks pointed out that this does not work and is only a debugging aid.  Although I don't see anything wrong with wanting to get it working...

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aabfb7940abc0611/e15c16162f92a6ca#e15c16162f92a6ca>



=head3 segfault on splice

Nick Glencross found a segfault when splicing an IntList.  Jens Rieks provided a patch that allowed parrot to die earlier and cleaner.  Leo fixed the problem.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/825d0b2ee8e15d73/bd72ed3b4004ce9c#bd72ed3b4004ce9c>



=head3 Documenting the MinGW build

FranÁois Perrad provided a patch updating documentation for building with MinGW.  Warnock applies.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c64adac9b6b4b822/dcdeb12bb567f52e#dcdeb12bb567f52e>



=head3 segfaulting md5sums

Nick Glencross decided to check up on his md5sum library.  It still compiles, but it segfaults.  Leo found and fixed the GC bug.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6ef839077855a882/e90e4226ded8159f#e90e4226ded8159f>



=head3 Parrot_Exec_OS_Command

FranÁois Perrad noticed that MinGW was very particular about how one execs OS commands.  He wondered if this should be fixed at the configure layer or the Parrot_Exec_OS_Command layer.  Dan explained that it was not intended to be language independant, and that a language independent version should go in a library.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9872aae4f7d39836/e4496796bc505458#e4496796bc505458>



=head3 Namespaces in PIR

Leo posted a call for comments on PIR namespaces.  Dan suggested a small addition.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5b0867aaa2381186/2c1e5c08e857421d#2c1e5c08e857421d>



=head3 builtins

Leo committed a change moving builtins to a class namespace and provided convenient access to them from PIR.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/478fad3d3c66989b/0768c592db76d962#0768c592db76d962>



=head3 MMD: multi sub syntax

Leo put out a call to develope a syntax for multi subs in PIR.  Many options were suggested.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bb978033e3dc8b06/7e90050886739a28#7e90050886739a28>



=head3 returning a variable number of arguments

Bob Rogers updated PIR code to allow a variable number of arguments to be returned.  Leo applied it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e6f47902d1c0e9c4/b9cf876745f5e8c8#b9cf876745f5e8c8>



=head2 The usual footer

Posting via the google groups interface does not work.  To post to any of these mailing lists please subscribe by sending email to <perl6-internals-subscribe@perl.org>, <perl6-language-subscribe@perl.org>,  or <perl6-compiler-subscribe@perl.org>.  If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to ubermatt@gmail.com

L<http://donate.perl-foundation.org/> -- The Perl Foundation
L<http://dev.perl.org/perl6/> -- Perl 6 Development site
L<http://planet.parrotcode.org/> -- Parrot Blog aggregator





