=head1 Perl 6 Summary for 2004-04-26 through 2005-05-03

All~

Welcome to another weeks summary.  This week I shall endeavor not to accidentally delete my summary or destroy the world.  So here we go with p6c.

=head2 Perl 6 Compilers

=head3 implicit $_ on for loops

Kiran Kumar found a bug in pugs involving C< for > loops which use C< $_ > but don't iterate over it.  Aaron Sherman and Luke Palmer confirmed the bug.  No word as to its final status, but given the rate of development of pugs...

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/69683b9aa7be224e/04e2d9f3c1e0a485#04e2d9f3c1e0a485>



=head3 Pugs Darcs trouble

Glenn Ehrlich noticed that pugs's darcs repository wasn't getting updated.  Sam Vilain explained that occasionally a daemon needed to be kicked.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/7ba880a18e930ef0/eb57bb2f9e835725#eb57bb2f9e835725>



=head3 Memory Game v0.2

BÁRTHÁZI András announced the release of the latest version of Memory.  He also put out a call for 85x75 pixel photos for the next version.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/27c9aa32b07143ac/d66c656ee7ac6104#d66c656ee7ac6104>



=head3 Haddock for Pugs

Stuart Cook decided that the easiest way for him to understand Pugs internals was to provide better documentation.  To that end he started working with haddock to automatically generate cross linked documentation for pugs.  He even met with some success.


L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3b3b13aba5edc94a/71bcde78a82cf6e4#71bcde78a82cf6e4>


L< http://haskell.org/haddock/ >

=head3 C< is export > trait

Garrett Rooney wondered why the C< is export > trait appeared to do nothing in Pugs.  Stevan Little explained that it was just a place holder which, while it parses, does nothing semantically yet.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/666781ac15240dd4/f454e750eba3d680#f454e750eba3d680>



=head3 Pugs 6.2.2

Autrijus proudly announced the release of Pugs 6.2.2.  It features a great many changes.  High on that list is a great number of speed ups and thread safe, dead lock free internal storage.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/c8cfa416b5e7a7c7#c8cfa416b5e7a7c7>



=head3 Pugs on Cygwin

Rob Kinyon noticed that Pugs was having trouble on Cygwin.  He has made some headway rectifying the situation, although work remains.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/c8cfa416b5e7a7c7#c8cfa416b5e7a7c7>



=head3 Pugs TODO model

Stevan has put some more thought into the TODO model for Pugs.  His latest suggestion, annotating todo tests with a flag indicating why they are not passing, seems a little less hackish then the last one and received general support.

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/9483fd2a5aec22e9/54c6a4194d06bb4d#54c6a4194d06bb4d>



=head3 Parrot hiding inside Pugs

Autrijus wanted to embed the newly released PGE.  PGE is written in PIR which runs on Parrot.  So, Autrijus decided to embed Parrot into Pugs.  He also posted an interesting link to JHC as a possible bootstrap solution.


L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b671d5f9c4af29f7/21ab762083e523b7#21ab762083e523b7>


L< http://repetae.net/john/computer/jhc/jhc.html >

=head3 new PGE released

Maybe I should have mentioned this first... Patrick R. Michaud released a new version of the Parrot Grammar Engine.  It is written entirely in PIR and generates PIR code.  It has many features but not enough tests... <cough> hint </cough>

L<http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/013c11d7818c06ce/989a407cc3427641#989a407cc3427641>



=head2 Parrot

=head3 Monthly Release?

Jared Rhine wondered the monthly releases included April.  Chip announced that April's release would be slushier then most, but would start on the fourth.  

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c84185258e7e0d7b/f7f3543949eda594#f7f3543949eda594>



L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a01d6610cb1d4ffa/1fd20ada3ae3fa6d#1fd20ada3ae3fa6d>



=head3 t/op/debuginfo.t failure

François Perrad noticed a failure in with debuginfo.  Leo pointed out that it was an issue of flushing output handles.  Francois provided a patch (well actually two).  Warnock applies to the second.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b03818f8c24a714d/bc38b1b8f82072c2#bc38b1b8f82072c2>



=head3 ParTcl Happy?

Will Coleda thought that ParTcl's GC bugs were finally fixed.  Leo burst his bubble.  Apparently these GC bugs can disappear and reappear according to sun spot activity.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/59555e75b86096e7/417caf2641040a92#417caf2641040a92>



=head3 segfault in load_bytecode

Nick Glencross submitted a patch fixing a segfault in load_bytecode.  Jens pointed out that it should use real_exception instead of internal_exception.  chromatic offered to write the test.  No official committed message though...

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/28bb0c982dc96158/4bb715005cd477ff#4bb715005cd477ff>



=head3 large PackFile tinker

Leo implemented a change in the interpreter PackFile structure which has been under discussion for a long time.  Unfortunately, it has the potential to break a lot of JIT stuff.  Tests and fixes would be greatly appreciated.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f66e120a77b7dea1/a76a1532c9d73a71#a76a1532c9d73a71>



=head3 PMC inheritance issue

Nicholas Clark was having some trouble with his Perl5 PMCs.  Later he posted a "mea culpa" email, but Leo provided some useful pointers anyway.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3355689f7d93ef77/efa3de4e8a1773d0#efa3de4e8a1773d0>



=head3 RT cleanup

Bernhard Schmalhofer cleaned out an old ticket from RT.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e5f150409499a4b9/e90b1895bf492ec0#e90b1895bf492ec0>



=head3 RFC assign Px, Py

Some time ago, Leo requested comments on the semantics of assign.  Brent 'Dax' Royal-Gordon tried to de-Warnock the thread with his support.  He also suggested a clone operator.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8e7c77c1e58a7a63/7521b02224111fd6#7521b02224111fd6>



=head3 NULL in real_exception

Nicholas Clark was getting bitten by a NULL pointer deref in real_exception.  Leo pointed him toward the correct approach.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8614b5f46c5afef5/9127affc3fb8db0f#9127affc3fb8db0f>



=head3 unary operator overhaul

Having finished overhauling the infix operators, Leo set to work updating the unary operators to provide variants which allocate their results.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0ada304f7b12b3b9/78369daf6a33d1ec#78369daf6a33d1ec>



=head3 die die, die!

Leo announce that he was removing the C< die > opcode and adding a Bruce Willis opcode in its place.  Unlike Mr Willis, the C< die_hard > opcode actually C< died > relatively easily and has been renamed to just C< die > out of popular demand.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/726a70c07d030bc9/b5218dafc585575b#b5218dafc585575b>



=head3 core dump with computed goto core

Nick Glencross found a core dump with he computed goto core.  Leo explained that it was caused by a hackish attempted optimization.  He also fixed it.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5cc6fc1e15d9aca5/2ec2ad5764204fee#2ec2ad5764204fee>



=head3 ignore generated files in SVN

Juergen Boemmels made SVN ignore some .so files.  Leo asked if it could also be made to ignore .rej and .orig files.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6f24da5492f08cf3/fac81156831a7cce#fac81156831a7cce>



=head3 DYNSUPER issues

Nicholas Clark found that DYNSUPER did not work well with his dynamic classes.  Leo provided a suggestion for something to try and also suggested a C< super > vtable call.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3afbf12eccf3dd61/a49d30cc2e4850c2#a49d30cc2e4850c2>



=head3 MMD type info

Autrijus wondered how the type info for MMD was carried around in Parrot.  Leo provided answers.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a86ffd2aa7f742c0/51154d82ec3ad392#51154d82ec3ad392>



=head3 imc http server

Markus Amslser wanted to write a tiny webserver in imc.  This led to the discovery of that the binary to ascii transcoding is absent.  Leo suggested several possible solutions.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b00883386e35f9bb/f7f80c8c5ba7c896#f7f80c8c5ba7c896>



=head3 Ponie's use of PMC flag bits

Nicholas Clark asked how best to use the 8 private bits of PMC in Ponie.  His initial thought was to mark type with it.    Leo suggested that adding the type to the flag bits was unnecessary as one can usually just call a vtable or MMD function directly and the type will get worked out.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/63537ac226178af4/cc3076d2e3060e93#cc3076d2e3060e93>



=head3 built in MMDs as methods

Leo added support for calling built in MMDs on objects as methods.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1a771b6b259aba13/264e518a2ae3e29a#264e518a2ae3e29a>



=head3 unary and infix ops update

Leo posted a summary and TODO for his overhaul of opcodes that return new results.  Jerry Gay and Bob Rogers helped fill out the corners.  Bob even provided some tests.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/16710a4ac706a01e/49e7fa9bd58cb829#49e7fa9bd58cb829>



=head3 Parrot and ref counting

Robin Redeker wondered why Parrot had decided to go with a non ref counting GC.  Dan Sugalski took responsibility for the decision and explained his motivations.  They are essentially simpler, cleaner, faster.  You can get a more detailed answer from reading the thread or Dan's blog post on GC from way back when.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c07a32bc11b665cc/d549c4a3dd3225ad#d549c4a3dd3225ad> -- the thread


L<http://www.sidhe.org/~dan/blog/archives/000200.html> -- Dan's Blog


Squawks of the Parrot: What the heck is: Garbage Collection

=head3 deprecate fast_call?

Leo mused that he would like to deprecate the fast_call PIR construct.  No one squawked, so I would call them officially deprecated...

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6d7d76ccd034d582/bbf3b646460a8de9#bbf3b646460a8de9>



=head3 Win32 thread primitives

Vladimir Lipsky and Leo went back and forth a few times working out thread primitives for windows.  I am not sure what state they finally reached.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/66b98ffd6b21d491/7055c56da4e90399#7055c56da4e90399>



=head3 call syntax abstraction

Leo posted a proposal for a calling convention abstraction.  No comments yet, but it has not been up for long.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06c1d2b53c317fda/739ced0badff1626#739ced0badff1626>



=head3 tailcalls in PIR
     
Patrick R. Michaud wondered if tailcalls and tailmethods were implemented in yet.  Leo provided a few pointers.  Bob Rogers suggested a nice syntax for it, which Leo implemented.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06bc2256eb0fa02f/4764b4627545d841#4764b4627545d841>



=head3 vtables in extend.h

Nicholas Clark noted a need for vtables in extend.h.  Leo agreed that they should be auto generated.  chromatic eagerly requested the chance to write the perl code that does this auto generation.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8275c0e33fbe7f73/8afa1165fe253894#8afa1165fe253894>



=head3 s/BAUILOUT/BAIL_OUT/

Michael G Schwern announced that Test::Builder was removing BAILOUT in favor of BAIL_OUT.  He admitted that a deprecated BAILOUT would remain, but be undocumented.  At some point we should update.

L<http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfe99da639662579/fcdb54c7e2a042c0#fcdb54c7e2a042c0>



=head2 Perl 6 Language

=head3 Anonymous Roles and closures

Aaron Sherman wondered if he could generate anonymous roles that are also closures.  It made my head hurt.  People seem to think it can be done though.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/925efba5007e366b/278b07bf0ab6408d#278b07bf0ab6408d>



=head3 Peter Piper picked a hash

Ingo Blechschmidt wondered what pick would return when called on a hash.  Rod Adams suggested that it would return a pair. Larry thought that would be a good idea, but might be difficult to implement.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/24e369fba3ed626e/b64aaafcca1c055e#b64aaafcca1c055e>



=head3 all(junctions, bad subjects, indecision)

Joshua Gatcomb found that he could use junctions to quickly answer questions but not provide specifics.  Sadly , he is not the first person to have this problem.  Junctions naturally provide boolean operations but do not naturally explain what motivated that answer.  Perhaps they should be thrown out along with the axiom of choice...  After all, do we really need a basis for ALL of our vector spaces?

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e08f7de7b69df5eb/aba86b97f1a1251c#aba86b97f1a1251c>



=head3 C< is rw> a no-op on references?

Ingo Blechschmidt wondered if C< is rw > didn't do anything for references as you can still modify the value to which they refer.  Juerd answered basically yes.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/90ff5afe035da8da/baef5fa481f0fdf3#baef5fa481f0fdf3>



=head3 complex number package

Jonathan Lang was wondering about creating a complex number package.  Including returning junctions of values for roots of unity.  Unfortunately these lists can be quite large, even infinite.  Thus he was wondering if he could use lazy junctions.  Thomas Sandlaß conjectured that he could by the "law of laziness preservation".

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2a97f706fe9155c1/cf1a5838783a72ad#cf1a5838783a72ad>



=head3 auto-threading of junctions and threads

Aaron Sherman worried that the auto-threading of junction would actually run in separate threads.  This is most assuredly not the common case, although some warped soul could implement it that way.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/778dca4cf38a52d8/361f6f87d1cff32c#361f6f87d1cff32c>



=head3 context of indices

Autrijus asked what context C< want > would provide when used as an index.  Larry provided answers.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c96c85ea8f511acc/3ad64e02a95dcf69#3ad64e02a95dcf69>



=head3 Sun's Fortress

Autrijus posted a link to a next-generation computer language from fun called Fortress then he went on to ask about parameterized types, tuple types, and block labels.  Bad Autrijus!  Make summarizers lives hard...  Then we have to punt like this rather than try to extract the three different threads at once.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/017005a999609b34/630048a564c26aed#630048a564c26aed>



=head3 restricting variable scopes with while

Joshua Gatcomb wanted to know how he could restrict the scope of variables used in the conditionals of his while statement to the loop.  This led to some discussion about the implementation of while as a macro or some other beast.  Larry began to ponder the submacro...

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2ef6fef80e878793/436d5489b9a75b49#436d5489b9a75b49>



=head3 FIRST, LAST et al support in pugs

David Christensen decided to try and add support for FIRST, LAST blocks and the like into Pugs.  This led him to p6l with some questions about traits which are closures.  Answers and suggestions were provided.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/dd5ffb21b1415af0/a0831d58dd4fc1ff#a0831d58dd4fc1ff>



=head3 junctions of classes

Ingo Blechschmidt wondered how junctions of classes would act.  The consensus seems to be that they act as type specifiers of a sort, restrict whatever can be put into the variables they describe.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a3d674ff66f67da0/fa3e3e7418df928c#fa3e3e7418df928c>



=head3 subtype declarations

Luke Palmer wondered what exactly subtype declarations provided and suggested jettisoning them.  Larry was not convinced.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f221c018f819b86f/4c031821dcb63e17#4c031821dcb63e17>



=head3 labels on blocks

Stevan Little wondered if there was some way to attach labels to blocks.  Discussion ensued, including a comment from Larry that it won't need to be redone.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f9148955e4c08bb2/0b2779b4506808ff#0b2779b4506808ff>



=head3 open and pipe

Gaal Yahas proposed a basic open and pope built in for discussion.  Discussion followed.  Larry mentioned that io (from io all) is "pretty much" blessed.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ed05cb58e8f61b17/b22033c9c8530e13#b22033c9c8530e13>



=head3 is if function?

Juerd wondered if C< if > as a function had unintended consequences.  Fortunately, C< if > is not a function, it is a statement level construct.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a6c71df5881d333e/f3d3ef24db245638#f3d3ef24db245638>



=head3 junctions in use statements

Juerd wondered if he could say C< use strict & warnings >.  Larry explained that there were parsing problems with it and possibly limited utility, but has not officially rules it out either as they can be worked around.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/072b19fefc404f80/fbb2a6e537cddab5#fbb2a6e537cddab5>



=head3 .foo() == one($_.foo(), $?SELF.foo())

This great quandary continues.  This week Larry is leaning towards to  C< .foo() == $_.foo() > camp.  But nothing is yet sealed...  He also suggested $^ as being equivalent to $?SELF (which I really like).  Time will tell how this one will work out.  My prediction is that the argument will rage on until Pugs is ready to implement it and needs a definitive answer...  then it will change a few more times.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d3ab335df56c8fc4/fd9dc1f0e0e1cf20#fd9dc1f0e0e1cf20>



=head3 type system questions

Autrijus asked a few questions about the type system and at which times it did what things.  Larry provided some answers.

L<http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/82ecf6620c641ddd/500a69e034596d36#500a69e034596d36>




=head2 The usual footer

To post to any of these mailing lists please subscribe by sending email to <perl6-internals-subscribe@perl.org>, <perl6-language-subscribe@perl.org>,  or <perl6-compiler-subscribe@perl.org>.  If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to ubermatt@gmail.com

L<http://donate.perl-foundation.org/> -- The Perl Foundation
L<http://dev.perl.org/perl6/> -- Perl 6 Development site
L<http://planet.parrotcode.org/> -- Parrot Blog aggregator






