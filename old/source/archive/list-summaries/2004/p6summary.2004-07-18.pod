=head1 The Perl 6 Summary for the week ending 2004-07-18

Following last week's bizarrely dated summary (I misplaced a day) we're
back with the correct week ending date, but I'm ashamed to admit that
I've slipped to writing on a Tuesday again. My head hangs in shame and
I am filled with the direst remorse.

It will probably happen again though; life's like that.

=head2 Pie-thon!

Anyone would think that the possibility of not even being able to run
the Piethon benchmark (let alone getting a pie in the face for running
it too slowly) weighs heavily on Dan. 

The bulk of the week's traffic related to getting to the point where we
can at least run all the tests. 

Python::Bytecode, the module that parses, well, python bytecode, shot up
in version numbers; I think it reached 2.7 by the end of the week.

Dan released a Piethon translator, a tool that uses Python::Bytecode
translate python to parrot. So has Leo. Dan's is on his website (see
the link below, you'll find Leo's in F<languages/python/pie-thon.pl>). 

L<http://groups.google.com/groups?threadm=40F26AD7.40000@toetsch.at> -- Parrot runs a python lambda

L<http://groups.google.com/groups?threadm=a06110407bd1c65dd4c0e@[10.0.1.3]> -- Notes on pie-thon.pl

L<http://groups.google.com/groups?threadm=a06110400bd1cf1d2b965@[10.0.1.3]> -- Namespaces for builtins

L<http://www.sidhe.org/~dan/piethon/translator.pl> -- Dan's translator



=head2 Semi-stack code

In a quest for speed when emulating python's stack manipulation ops,
Dan outlined a plan for manipulating a pseudo stack using some of
Parrot's PMC register (18-29, with P31 used for overflow). Leo wasn't
convinced it was needed. 

L<http://groups.google.com/groups?threadm=a06110402bd1ae870b2ad@[10.0.1.3]>

=head2 C<string_to_num> precision

Leo's got some problems with the precision of the C<string_to_num>
function found in F<string.c>. He doctored things to use C<atof>, but
Dan's not so keen on that idea because C<atof> doesn't have standard
behaviour across platforms. He recommended grabbing Perl 5's string to
num code (which he thought we'd already done). Nicholas Clark wasn't
convinced that this was a good idea; he reckoned that Perl 5's code
wasn't good enough. I think Nicholas convinced Dan that C<atof> is
actually the right thing to use (with a little preprocessing to deal
with C99's C<atof> being incompatible with C89's -- Parrot expects
C89 behaviour). 

L<http://groups.google.com/groups?threadm=40F28C82.3010904@toetsch.at>

=head2 GMP Licensing

Armin Obersteiner reported his investigations into the licensing
requirements of the GMP maths library. It appears that the FSF's 'GPL
Compliance Engineer' reckons we won't need to include the GMP's source
code with binary distributions. We just have to make it available from
the same source as the distribution. Which is handy.

L<http://groups.google.com/groups?threadm=20040713210952.GC2452@elch.elche>

=head2 Parrot configuration -- a small perl task

Leo asked for volunteers to fix up Configure.pl in order to make it
less dependent on the host Perl's configuration. Brent Royal-Gordon
provided a teeny-tiny patch that's actually shorter than Leo's
description of the problem.

L<http://groups.google.com/groups?threadm=40F76AE3.4000506@toetsch.at>

=head1 Meanwhile, in perl6-language

=head2 Scalar subscripting

Remember Guatam Gopalakrishnan's question about subscripting scalars?
Discussion continued. One Piers Cawley (who he?) suggested that it
should be possible to specify a C<postcircumfix:[] is rw> method in the
String class to make string subscripting behave in a helpful
fashion. He also suggested pulling this (and other similar behaviours)
out into a Sequence trait. Juerd thought the proposed method name was a
little verbose compared to Ruby's syntax for doing the same thing and
showed off some rather pretty Ruby metaphors.

Another subthread discussed interpolation in strings. Larry's changed
his mind so that C<"$file.ext"> is now interpreted as
C<"$object.method">. You need to do C<"${file}.ext"> or C<"$( $file
).ext">. Or maybe C<"$«file».ext"> by analogy with C<%foo«bar»>. James
Mastros pointed out that C<.> is rather ambiguous in a literal string;
sometimes a full stop is just a full stop. 

L<http://groups.google.com/groups?threadm=a3ada2d104070804124184a442@mail.gmail.com>

=head2 Pushing lazy lists

This thread continues to resemble the lists it is nominally discussing:
Infinitely long and possibly endless.

L<http://groups.google.com/groups?threadm=200407121213.12812.philipp.marek@bmlv.gv.at>

=head2 Perl 6 and Parrot Essentials, 2nd Edition

Leo pointed us at an O'Reilly press release announcing that the second
edition of I<Perl 6 and Parrot Essentials> is available. Huzzah! Let
joy be unconfined.

L<http://groups.google.com/groups?threadm=40F26C12.6030704@toetsch.at>

=head2 Rules to match abbreviations

Hans Ginzel wondered wondered about adding something to the rules
system to easily match specified abbreviations of a string. Luke Palmer
came up with a (pretty ugly) solution which he then wrapped very neatly
in a rule. 

L<http://groups.google.com/groups?threadm=20040713071222.GC338@matfyz.cz>

=head2 Enhancing C<open>

There's a good deal of mileage to be had talking about how to improve
the C<open> function it seems. 

Larry continues to come up with new and interesting ways of designing
the language in such a way that almost every decision about how to do
something can be deferred. Speaking as someone who wishes he could just
write C<Application.new.run> and then debug his way to working code,
I'm all for this kind of late binding.

It's also amazing how much use Larry's getting out of his colon. (The
character, obviously). 

L<http://groups.google.com/groups?threadm=20040713132455.GC27097@babylonia.flatirons.org>

=head2 Cartesian products and iterations

Michele Dondi wondered whether Perl 6 will support Cartesian products
between lists. Short answer: "Yes". It's probably called C<outer>.

L<http://groups.google.com/groups?threadm=Pine.LNX.4.58.0407131513280.30821@q.pcteor1.mi.infn.it>

=head2 Do we really need filehandles?

Dave Whipp thought the unthinkable (but in a good way) and wondered if
we actually I<need> user visible filehandles give the tools we have for
slicing and dicing strings, manipulating lazy data structures, etc. He
proposed being able to write:

    my $text is TextFile("/tmp/foo.txt");
    for $text.lines -> {
        ...
    }

Which is rather neat isn't it? Personally I'm not sure we can get rid
of filehandles, but I do like the idea of a library that implements
something like this. Alex Shitov pointed out that there would still be
a need for methods like C<$text.flush()> or C<$text.close()>. 

L<http://groups.google.com/groups?threadm=20040718172834.89363.qmail@onion.perl.org>

=head1 Announcements, Apologies, Acknowledgements

Okay, so the interview was on Tuesday 13th of July. It went well; I'm
going to be a maths teacher. 

If you find these summaries useful or enjoyable, please consider
contributing to the Perl Foundation to help support the development of
Perl. You might also like to send me feedback at
L<mailto:pdcawley@bofh.org.uk>

L<http://donate.perl-foundation.org/> -- The Perl Foundation

L<http://dev.perl.org/perl6/> -- Perl 6 Development site

