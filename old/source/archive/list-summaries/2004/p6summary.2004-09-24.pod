=head1 The Perl 6 Summary for the week ending 2004-09-24

So, this is my last summary before I start my teaching
practice. Hopefully I've got things set up so writing the summary isn't
going to interfere with that, and vice versa. 

=head1 This week in perl6-compiler

=head2 State of Rules

Discussion of the state of the Perl 6 compiler (with particular
reference to the rules engine) continued. People were concerned with
making sure that the rules engine that Luke and Patrick are working on
would be flexible enough to cope with different languages in
'closures'. 

=head2 Synopsis 5 updated

Ed Peschko asked that there be some way of 'turning the rules engine
inside out' to make something which, given a rule, would generate
strings that could match against it. Actually, this is the second time
Ed asked for this, as Luke reminded him. Luke went on to implement
a generator in hypothetical perl 6, which seemed to please everyone but
Ed.

Rod Adams wins the 'making the summarizer smile wryly' occasional
prize. 

L<http://groups.google.com/groups?threadm=20040920215812.GA9454@mdssdev05>

=head1 Meanwhile, in perl6-internals

=head2 Problems Reimplementing Parrot Forth

Matt Diephouse fell foul of problems with the C<compile> and C<compreg>
opcodes in his efforts to reimplement Parrot Forth in PIR. Steve Fink
made some suggestions for workarounds based on his work on writing a
regular expression compiler. 

>From further discussion, it seems that, if you're implementing a stack
based language, you'd do well to manage the language's stack yourself
rather than using Parrot's User stack which is interestingly scoped.

L<http://groups.google.com/groups?threadm=198c873804091714515c11197d@mail.gmail.com>

=head2 C<__init> not being magically called

Will Coleda had some problems with a class's C<__init> function not
being called magically. Nobody else could reproduce the problem. After a
certain amount of confusion, Will did C<make realclean; perl
Configure.pl; make; make test> and all was well again. 

If you're experiencing a weird problem, it's probably best to do the
rebuild before posting to the list. Or you could fix the build system to
have more accurate dependencies...

L<http://groups.google.com/groups?threadm=414D3726.1070103@coleda.com>

=head2 Incremental collector and finalization

Jeff Clites had some questions about how finalizers interact with the
work that Leo's been doing on implementing an incremental garbage
collector for Parrot. Leo had some thoughts, but noted that there's
still a problem with ordered finalization and destruction.

[Your summarizer is really starting to get a feel for why old school GC
types really don't like finalizers...]

L<http://groups.google.com/groups?threadm=002F1A0F-0AC3-11D9-8600-000393A6B9DA@mac.com>

=head2 Python bytecode volunteers

Dan asked for volunteers to finish the task of getting python bytecode
working on Parrot; he reckoned that the work was mostly done, but that
neither he nor Leo have the time to go the last couple of yards. 

Come on people, this would definitely be a cool thing to have.

L<http://groups.google.com/groups?threadm=a06110401bd74d011bd71@[10.0.1.5]>

=head2 mod_parrot 0.0

Jeff Horwitz announced the release of version 0.0 of his mod_parrot
Apache module. It's remarkably powerful for version 0.0

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0409201512210.7974-100000@booger.sixgeeks.org>

=head2 The C<compile> op and building compilers

Dan had some thoughts on tidying up the spec for the C<compreg> and
C<compile> operators and asked for comments before he nailed the spec
down. Steve Fink and Leo had comments.

L<http://groups.google.com/groups?threadm=a06110405bd750b80ab4a@[10.0.1.5]>

=head2 Misc. remarks about YAPC::EU

Leo popped up to thank everyone who'd donated to The Perl Foundation
and thus supported the purchase of shiny new Apple Powerbook G4 that
he'd used to run his presentation at YAPC Europe in Belfast. 

He went on to outline some of the things he'd done and heard in Belfast,
including the fact that one French teacher is using Parrot for teaching
assembly language.

L<http://groups.google.com/groups?threadm=4150301E.7050409@toetsch.at>

=head2 Parrot m4 0.0.8

Bernhard Schmalhofer announced version 0.0.8 of Parrot m4. There's no
new functionality 'just' some structural improvement and tidying. 

L<http://groups.google.com/groups?threadm=rt-3.0.11-31659-96593.15.6775143505678@perl.org>

=head2 Parrot TCL

Will Coleda posted a progress report on his Parrot TCL implementation
which is progressing gradually towards being a full blown TCL
implementation; he's working towards using special Tcl* PMCs with real
TCL semantics instead of the current scheme which uses Perl PMCs.

L<http://groups.google.com/groups?threadm=41517393.30204@coleda.com>

=head2 Namespaces, Part 1

Dan posted the first part of his Namespaces spec. There was, of course,
much discussion. Inevitably, there was another revision, and further discussion.

L<http://groups.google.com/groups?threadm=a06110415bd77687142d1@[10.0.1.5]>

L<http://groups.google.com/groups?threadm=a0611040fbd7a051cf273@[172.24.18.155]> -- The revised version

=head2 Towards a new call scheme

Leo posted an overview of the work he was doing on Parrot's internals
to get a faster calling scheme in place (as discussed endlessly). The
usual perl6-internals discussion and revision process swung into
action. 

L<http://groups.google.com/groups?threadm=4152DA7E.1050603@toetsch.at>

=head2 Hello everybody

Remember the French teacher that Leo mentioned? Well, the man himself, Christian
Aperghis-Tramoni popped up on the list and pointed everyone at his work
so far, and asked for help in finding more information. 

If anyone would like to translate Christian's work from French to
English...

L<http://groups.google.com/groups?threadm=25961BC4-0DF4-11D9-BEF3-000393BBDA08@dil.univ-mrs.fr>

=head2 Bits of introspection

Leo announced that he'd started work on adding more introspection
features to Parrot, accessible through the C<interpinfo> op. All of
which looks very cool.

L<http://groups.google.com/groups?threadm=41540125.3070401@toetsch.at>

=head2 Why lexical pads

Klaas-Jan wondered why Parrot had support for lexical pads, as he
thought that PIR's C<.local> syntax was good enough...

Several people explained (essentially, lexical pads are C<really> handy,
bordering on the essential, when you're implementing a language with
closures). 

L<http://groups.google.com/groups?threadm=41542942.5080304@home.nl>

=head1 Meanwhile, in perl6-language

Discussion of various synopses continued.

Larry can be very persuasive when he's right.

Michele Dondi is a chap.

Trying to run a thread across multiple mailing lists is the sort of
thing that annoys a summarizer.

You have to write something before it goes in the core.

Patrick hopes to have a first cut at the Perl 6 rules engine available
within a couple of weeks.

=head2 Pipeline Performance

Luke showed off Perl 6's little known C<gather {...; take ... }>
construct in some example code. People were impressed.

L<http://groups.google.com/groups?threadm=d60j42vy.fsf@jonadab.homeip.net>

=head2 Unary dot and custom control

Luke Palmer wondered about topicalization and scope in:

    method foo () {
        preserve {
            .bar;
        }
    }

In particular, he hoped that the topic that C<.bar> sees is the topic
that's lexically current.

Larry set his mind to rest. (Well, he set my mind to rest).  

L<http://groups.google.com/groups?threadm=20040920132514.GA11388@babylonia.flatirons.org>

=head2 attributes/methods on sigils

Michele Dondi wondered if sigils could be "(sort of special) operators
... thus allowing attributes/methods or even adverbs". Larry's response
was superbly deadpan.

L<http://groups.google.com/groups?threadm=Pine.LNX.4.60.0409211313430.18712@q.pcteor1.mi.infn.it>

=head1 The usual footer

Hmm... maybe I should trying doing the perl6-language summary like that
every week; it's certainly quicker to write like that. Let me know what
you think.

If you find these summaries useful or enjoyable, please consider
contributing to the Perl Foundation to help support the development of
Perl. You might also like to send feedback or contributions to a
'getting Piers to OSCON 2005' fund to L<mailto:pdcawley@bofh.org.uk>

L<http://donate.perl-foundation.org/> -- The Perl Foundation

L<http://dev.perl.org/perl6/> -- Perl 6 Development site

Or, you can check out my website.

L<http://www.bofh.org.uk/>
