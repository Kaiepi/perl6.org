=head1 The Perl 6 Summary of the week ending 20030928

This week, on perl6-internals, stuff was said, code was written, Leo
TE<ouml>tsch was the patchmonster, life got some colour, Amir Karger
needs to work harder if he wants to be mentioned in the summary again,
Dan Sugalski was our glorious leader.

Meanwhile, on perl6-language, Larry's back (yay!), Austin Hastings' front.

If you've enjoyed this summary please send lawyers, guns and money to...

Ah heck! Try as I might, I can't get away with that can I? Here's the
real thing, starting with perl6-internals

=head2 C<parrot -t> gets fixed

Will Coleda had some problems that C<parrot -t> didn't seem to
solve. This prompted Leo to take a look at the C<-t> behaviour,
which, whilst not actually I<leaking> memory, nevertheless used an
awful lot of it. So Leo fixed things up and posted an explanation of
what got fixed. It looks to me as if said explanation might come in
handy for anyone wanting to know how to play nice with the garbage
collector. (The essential rule seems to be "Whatever you do, don't
turn off garbage collection, you might have to jump through a few
extra hoops when it's on, but trust us, it's worth it.")

L<http://groups.google.com/groups?threadm=3F6EE363.1060508%40toetsch.at>

=head2 Pondering argument passing

The prototyped and unprototyped parameter passing powwow perpetuated
itself this week. It was decided/reiterated that all flattening
happens in the caller and all binding happens in the callee. Steve
Fink and Leo finally managed to get onto the same wavelength. Dan
emphasised that passing everything in a PerlArray is the Wrong
Thing. Parrot acquired a C<setp Ix, Py> op, which does indirect
register addressing. 

Scary thought of the week: mutable default values.

L<http://groups.google.com/groups?threadm=20030922155731.GD13013%40foxglove>

=head2 Trig functions for vtables

Dan started collecting a list of trig functions to hang off
PMCs. After an initial bit of quibbling about whether trig functions
were really necessary, Leo TE<ouml>tsch pointed out that they would
be reached via a secondary vtable, akin to doing C<<
$obj->{vtable}{trig_funcs}{sin} >> (but not implemented in Perl.)

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0309221341020.21077-100000%40redcap.sidhe.org> 

=head2 All hands to the pumps!

Leo TE<ouml>tsch has been running the parrot test suite and looking
for memory leaks. Things are not looking good. It looks like we'll be
seeing a bunch of patches to patch the leaks soon. At least, I hope
will will. 

L<http://groups.google.com/groups?threadm=3F701DB5.2040003%40toetsch.at>

=head2 Notes from the Captain

Dan has been thinking hard about stuff. In particular, he's been
thinking about namespaces and calling/return conventions. He's still
undecided about how we're going to handle namespaces. The
Calling/return conventions however have been settled (but not written
up formally yet). Essentially, calling a subroutine and invoking a
return continuation are pretty much indistinguishable, so returning
a bunch of values will use the same mechanism as passing in a bunch
of parameters.

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0309231008490.4164-100000%40redcap.sidhe.org>

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0309231043510.4164-100000%40redcap.sidhe.org>

=head2 Parrot::DWIM

Leo TE<ouml>tsch is a scary man. 'Inspired' by Damian Conway's
Acme::DWIM module, he's perpetrated Parrot::DWIM. You're better off
not knowing. Honest. 

L<http://groups.google.com/groups?threadm=3F70A167.1090108%40toetsch.at>

=head2 Loading up bytecode segments

Now that we have dynamically loaded bytecode segments, Dan specified
how they should be auto execed on loading (for running set up code
etc). Leo and Dan had a short discussion about whether Dan's spec was
the Right Spec, the two proposals were deemed equivalent, so Dan's
spec was the one that gets implemented.

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0309231647180.4164-100000%40redcap.sidhe.org>

=head2 Another trivial language

Marcus Thiesen announced that he had ported another language to
Parrot: URM -- 'Universal Register Machine' which is a teaching
language used in German universities. 

L<http://groups.google.com/groups?threadm=1064348963.710.4.camel%40mobilHal.thiesenweb>

=head2 Curses!

Dan's wrapped ncurses in parrot using NCI and used that to redo
F<examples/assembly/life.pasm> (which was originally written by Dan,
but is often misattributed to Leon Brocard) as
F<examples/assembly/ncurses_life.pasm>, adding colorized goodness. 

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0309241335400.16892-100000%40redcap.sidhe.org>

=head2 Lightweight Languages 2003 CFP

The Lightweight Languages conference LL3 has a Call For Papers out
now. Dan posted it to the list.

L<http://groups.google.com/groups?threadm=Pine.LNX.4.44.0309261002270.5990-100000%40redcap.sidhe.org>

=head1 Meanwhile, in perl6-language

=head2 Larry Wall is in the house

Larry popped up on the list for the first time in ages, answering
questions about macro arguments and autovivification. 

L<http://groups.google.com/groups?threadm=20030926024309.GA22411%40wall.org>

L<http://groups.google.com/groups?threadm=20030926024309.GA22411%40wall.org>

=head2 Pondering parametrized operators

Austin Hastings wondered about making parametrized operators. The
example he gave was an infix version of C<strncmp>. I can't see what's
wrong with doing C<< strncmp $this, $that, cmplen => 4 >>, but Austin
proposes a scheme where one could write C<"Dough" eqn(4) "Douglas">
and have it return true. Various other possibilities were discussed.

L<http://groups.google.com/groups?threadm=20030926203455.88113.qmail%40web12306.mail.yahoo.com>

=head1 Acknowledgements, Announcements, Apologies

Sorry it's late.

There's nothing new at L<http://www.bofh.org.uk:8080/>. Looks like
it's turning into a dead blog. 

As ever, if you've appreciated this summary, please consider one or
more of the following options:

=over 

=item *

Send money to the Perl Foundation at
L<http://donate.perl-foundation.org/> and help support the ongoing
development of Perl.

=item *

Get involved in the Perl 6 process. The mailing lists are open  to
all. L<http://dev.perl.org/perl6/> and L<http://www.parrotcode.org/>
are good starting points with links to the appropriate mailing lists.

=item *

Send feedback, flames, money, requests for consultancy, photographic
and writing commissions, or hot meal to L<p6summarizer@bofh.org.uk>

=back